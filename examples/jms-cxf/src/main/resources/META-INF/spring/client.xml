<?xml version="1.0" encoding="UTF-8"?>
<!-- Copyright (C) 2010 Talend Inc. - www.talend.com -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:jaxws="http://cxf.apache.org/jaxws"
	xsi:schemaLocation="
    http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
    http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd
    http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd">

	<import resource="classpath:META-INF/cxf/cxf.xml" />
	<import resource="classpath:META-INF/cxf/cxf-extension-soap.xml" />
	<import resource="classpath:META-INF/cxf/cxf-extension-camel.xml"/>

	<jaxws:client id="greeterProxy" 
		address="camel://direct:greeterClientEndpoint"
		serviceClass="com.talend.examples.jms_greeter.JMSGreeterPortType"/>
		
	<bean id="client" class="demo.jms_greeter.client.Client">
		<property name="greeter" ref="greeterProxy"/>
	</bean>

	<camelContext id="camelContext" xmlns="http://camel.apache.org/schema/spring">
		<route>
			<from uri="direct:greeterClientEndpoint" />
			
			<!-- The following headers are only necessary to show interoperation with the soap/jms
				 example from Talend Service Factory. When testing against the server in this example
				 they can be left out.
				 The current soap/jms spec implementation in cxf requires the following headers to be set.
				 We use the dsl to make caml jms compliant to the spec. This shows how you can easily 
				 work around compatibility problems using camel -->
			<setHeader headerName="SOAPJMS_contentType">
				<constant>text/xml</constant>
			</setHeader>
			<setHeader headerName="SOAPJMS_requestURI">
				<constant>jms://queue:test</constant>
			</setHeader>

			<to uri="jms:test.cxf.jmstransport.queue" />
		</route>
	</camelContext>
	
	<bean id="jms" class="org.apache.camel.component.jms.JmsComponent">
		<property name="connectionFactory" ref="connectionFactory"/>
	</bean>
	
	<bean id="connectionFactory" class="org.apache.activemq.spring.ActiveMQConnectionFactory">
	</bean>
</beans>
